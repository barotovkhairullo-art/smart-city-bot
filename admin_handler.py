import requests
import json
import re
from datetime import datetime
from history_events import add_event, load_events, delete_event

TELEGRAM_BOT_TOKEN = "8249137825:AAHChjPuHOdL7Y5su0gYpQnwtDZ4ubfXsl0"

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

def load_config():
    with open('config.json', 'r') as f:
        return json.load(f)

def save_config(config):
    with open('config.json', 'w') as f:
        json.dump(config, f, indent=2)

def send_telegram_message(chat_id, text, reply_markup=None):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    data = {
        "chat_id": chat_id, 
        "text": text,
        "parse_mode": "HTML"
    }
    if reply_markup:
        data["reply_markup"] = json.dumps(reply_markup)
    requests.post(url, data=data)

def get_main_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    return {
        "keyboard": [
            ["‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏", "üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏"],
            ["üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞", "üì® –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞"],
            ["‚úÖ –í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞", "‚ùå –í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞"]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": False
    }

def get_time_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    return {
        "keyboard": [
            ["üïê 08:00", "üïê 10:00", "üïê 12:00"],
            ["üïê 14:00", "üïê 16:00", "üïê 18:00"],
            ["üïê 20:00", "üïê 22:00", "‚úèÔ∏è –î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è"],
            ["üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": False
    }

def get_events_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è–º–∏"""
    return {
        "keyboard": [
            ["üìù –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", "üìã –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π"],
            ["‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ"],
            ["üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": False
    }

def get_months_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞"""
    return {
        "keyboard": [
            ["1Ô∏è‚É£ –Ø–Ω–≤–∞—Ä—å", "2Ô∏è‚É£ –§–µ–≤—Ä–∞–ª—å", "3Ô∏è‚É£ –ú–∞—Ä—Ç"],
            ["4Ô∏è‚É£ –ê–ø—Ä–µ–ª—å", "5Ô∏è‚É£ –ú–∞–π", "6Ô∏è‚É£ –ò—é–Ω—å"],
            ["7Ô∏è‚É£ –ò—é–ª—å", "8Ô∏è‚É£ –ê–≤–≥—É—Å—Ç", "9Ô∏è‚É£ –°–µ–Ω—Ç—è–±—Ä—å"],
            ["üîü –û–∫—Ç—è–±—Ä—å", "1Ô∏è‚É£1Ô∏è‚É£ –ù–æ—è–±—Ä—å", "1Ô∏è‚É£2Ô∏è‚É£ –î–µ–∫–∞–±—Ä—å"],
            ["üîô –ù–∞–∑–∞–¥ –∫ —Å–æ–±—ã—Ç–∏—è–º"]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": False
    }

def get_days_keyboard(month):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è –º–µ—Å—è—Ü–∞"""
    days_in_month = {
        1: 31, 2: 29, 3: 31, 4: 30, 5: 31, 6: 30,
        7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31
    }
    
    days = []
    row = []
    for day in range(1, days_in_month[month] + 1):
        row.append(f"{day:02d}")
        if len(row) == 5:  # 5 –¥–Ω–µ–π –≤ —Å—Ç—Ä–æ–∫–µ
            days.append(row)
            row = []
    if row:
        days.append(row)
    
    days.append(["üîô –ù–∞–∑–∞–¥ –∫ –º–µ—Å—è—Ü–∞–º"])
    
    return {
        "keyboard": days,
        "resize_keyboard": True,
        "one_time_keyboard": False
    }

def get_cancel_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è"""
    return {
        "keyboard": [["üîô –û—Ç–º–µ–Ω–∏—Ç—å"]],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def get_edit_events_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π"""
    events_db = load_events()
    keyboard = []
    row = []
    
    for date_key in sorted(events_db.keys())[:20]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 20 –¥–∞—Ç–∞–º–∏
        month = int(date_key[:2])
        day = int(date_key[2:])
        button_text = f"üìÖ {day:02d}.{month:02d}"
        row.append(button_text)
        
        if len(row) == 2:  # 2 –¥–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫–µ
            keyboard.append(row)
            row = []
    
    if row:
        keyboard.append(row)
    
    keyboard.append(["üîô –ù–∞–∑–∞–¥ –∫ —Å–æ–±—ã—Ç–∏—è–º"])
    
    return {
        "keyboard": keyboard,
        "resize_keyboard": True,
        "one_time_keyboard": False
    }

def process_admin_command(message_text, chat_id):
    config = load_config()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
    if chat_id not in config["ADMIN_IDS"]:
        send_telegram_message(chat_id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã (–∫–Ω–æ–ø–∫–∏)
    if message_text == "‚è∞ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏" or message_text == "‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏":
        user_states[chat_id] = "waiting_for_time"
        send_telegram_message(chat_id,
            "üïê <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b>\n\n"
            "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≥–æ—Ç–æ–≤–æ–µ –≤—Ä–µ–º—è\n"
            "‚Ä¢ –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–ß–ß:–ú–ú</code>\n"
            "‚Ä¢ –ù–∞–ø—Ä–∏–º–µ—Ä: <code>15:30</code>",
            reply_markup=get_time_keyboard()
        )
        return
    
    elif message_text == "üìÖ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏" or message_text == "üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏":
        send_telegram_message(chat_id,
            "üìÖ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏:</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_events_keyboard()
        )
        return
    
    elif message_text == "üìù –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ" or message_text == "üìù –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ":
        user_states[chat_id] = "selecting_month_for_add"
        send_telegram_message(chat_id,
            "üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:</b>",
            reply_markup=get_months_keyboard()
        )
        return
    
    elif message_text == "üìã —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π" or message_text == "üìã –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π":
        show_events_list(chat_id)
        return
    
    elif message_text == "‚úèÔ∏è –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ" or message_text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ":
        user_states[chat_id] = "selecting_date_for_edit"
        send_telegram_message(chat_id,
            "üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>",
            reply_markup=get_edit_events_keyboard()
        )
        return
    
    elif message_text == "üóëÔ∏è —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ" or message_text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ":
        user_states[chat_id] = "selecting_date_for_delete"
        send_telegram_message(chat_id,
            "üóëÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π:</b>",
            reply_markup=get_edit_events_keyboard()
        )
        return
    
    elif message_text == "üîß –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞" or message_text == "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞":
        show_settings(chat_id, config)
        return
    
    elif message_text == "üì® —Ç–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞" or message_text == "üì® –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞":
        send_test_message(chat_id)
        return
    
    elif message_text == "‚úÖ –≤–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞" or message_text == "‚úÖ –í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞":
        enable_bot(chat_id, config)
        return
    
    elif message_text == "‚ùå –≤—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞" or message_text == "‚ùå –í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞":
        disable_bot(chat_id, config)
        return
    
    elif message_text == "üîô –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é" or message_text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        user_states.pop(chat_id, None)
        send_telegram_message(chat_id, 
            "üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –£–º–Ω—ã–π –ì–æ—Ä–æ–¥</b>", 
            reply_markup=get_main_keyboard()
        )
        return
    
    elif message_text == "üîô –Ω–∞–∑–∞–¥ –∫ —Å–æ–±—ã—Ç–∏—è–º" or message_text == "üîô –ù–∞–∑–∞–¥ –∫ —Å–æ–±—ã—Ç–∏—è–º":
        user_states.pop(chat_id, None)
        send_telegram_message(chat_id,
            "üìÖ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏:</b>",
            reply_markup=get_events_keyboard()
        )
        return
    
    elif message_text == "üîô –Ω–∞–∑–∞–¥ –∫ –º–µ—Å—è—Ü–∞–º" or message_text == "üîô –ù–∞–∑–∞–¥ –∫ –º–µ—Å—è—Ü–∞–º":
        user_states[chat_id] = "selecting_month_for_add"
        send_telegram_message(chat_id,
            "üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:</b>",
            reply_markup=get_months_keyboard()
        )
        return
    
    elif message_text == "‚úèÔ∏è –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è" or message_text == "‚úèÔ∏è –î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è":
        user_states[chat_id] = "waiting_for_custom_time"
        send_telegram_message(chat_id,
            "‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤—Ä—É—á–Ω—É—é:</b>\n\n"
            "–§–æ—Ä–º–∞—Ç: <code>–ß–ß:–ú–ú</code>\n"
            "–ü—Ä–∏–º–µ—Ä: <code>15:30</code>\n\n"
            "–í—Ä–µ–º—è —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –î—É—à–∞–Ω–±–µ (UTC+5)",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    elif message_text == "üîô –æ—Ç–º–µ–Ω–∏—Ç—å" or message_text == "üîô –û—Ç–º–µ–Ω–∏—Ç—å":
        user_states.pop(chat_id, None)
        send_telegram_message(chat_id, 
            "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", 
            reply_markup=get_main_keyboard()
        )
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –º–µ—Å—è—Ü–∞
    elif message_text in ["1Ô∏è‚É£ –Ø–Ω–≤–∞—Ä—å", "2Ô∏è‚É£ –§–µ–≤—Ä–∞–ª—å", "3Ô∏è‚É£ –ú–∞—Ä—Ç", "4Ô∏è‚É£ –ê–ø—Ä–µ–ª—å", "5Ô∏è‚É£ –ú–∞–π", "6Ô∏è‚É£ –ò—é–Ω—å",
                         "7Ô∏è‚É£ –ò—é–ª—å", "8Ô∏è‚É£ –ê–≤–≥—É—Å—Ç", "9Ô∏è‚É£ –°–µ–Ω—Ç—è–±—Ä—å", "üîü –û–∫—Ç—è–±—Ä—å", "1Ô∏è‚É£1Ô∏è‚É£ –ù–æ—è–±—Ä—å", "1Ô∏è‚É£2Ô∏è‚É£ –î–µ–∫–∞–±—Ä—å"]:
        month_map = {
            "1Ô∏è‚É£ –Ø–Ω–≤–∞—Ä—å": 1, "2Ô∏è‚É£ –§–µ–≤—Ä–∞–ª—å": 2, "3Ô∏è‚É£ –ú–∞—Ä—Ç": 3, "4Ô∏è‚É£ –ê–ø—Ä–µ–ª—å": 4,
            "5Ô∏è‚É£ –ú–∞–π": 5, "6Ô∏è‚É£ –ò—é–Ω—å": 6, "7Ô∏è‚É£ –ò—é–ª—å": 7, "8Ô∏è‚É£ –ê–≤–≥—É—Å—Ç": 8,
            "9Ô∏è‚É£ –°–µ–Ω—Ç—è–±—Ä—å": 9, "üîü –û–∫—Ç—è–±—Ä—å": 10, "1Ô∏è‚É£1Ô∏è‚É£ –ù–æ—è–±—Ä—å": 11, "1Ô∏è‚É£2Ô∏è‚É£ –î–µ–∫–∞–±—Ä—å": 12
        }
        
        month = month_map[message_text]
        current_state = user_states.get(chat_id)
        
        if current_state == "selecting_month_for_add":
            user_states[chat_id] = f"selecting_day_for_add_{month}"
            send_telegram_message(chat_id,
                f"üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –º–µ—Å—è—Ü–∞:</b>\n\n–ú–µ—Å—è—Ü: {month:02d}",
                reply_markup=get_days_keyboard(month)
            )
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –¥–Ω—è
    elif re.match(r'^\d{1,2}$', message_text.strip()):
        day = int(message_text.strip())
        current_state = user_states.get(chat_id)
        
        if current_state and current_state.startswith("selecting_day_for_add_"):
            month = int(current_state.split('_')[-1])
            if 1 <= day <= 31:
                user_states[chat_id] = f"waiting_event_text_{month:02d}{day:02d}"
                send_telegram_message(chat_id,
                    f"üìù <b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–±—ã—Ç–∏—è:</b>\n\n"
                    f"üìÖ –î–∞—Ç–∞: {day:02d}.{month:02d}\n\n"
                    f"–ü—Ä–∏–º–µ—Ä:\n<code>1990 ‚Äì –î–µ–Ω—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω–∞</code>",
                    reply_markup=get_cancel_keyboard()
                )
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –¥–∞—Ç—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è
    elif message_text.startswith("üìÖ ") and len(message_text) == 6:
        try:
            date_str = message_text.replace("üìÖ ", "").strip()
            day, month = map(int, date_str.split('.'))
            current_state = user_states.get(chat_id)
            
            if current_state == "selecting_date_for_edit":
                show_events_for_date(chat_id, month, day, "edit")
            elif current_state == "selecting_date_for_delete":
                show_events_for_date(chat_id, month, day, "delete")
        except:
            pass
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_state = user_states.get(chat_id)
    
    if current_state == "waiting_for_time":
        process_time_input(message_text, chat_id, config)
    
    elif current_state == "waiting_for_custom_time":
        process_custom_time_input(message_text, chat_id, config)
    
    elif current_state and current_state.startswith("waiting_event_text_"):
        process_event_input(message_text, chat_id, current_state)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
    elif message_text.startswith('/'):
        process_text_commands(message_text, chat_id, config)
    
    else:
        # –ï—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        send_telegram_message(chat_id, 
            "üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –£–º–Ω—ã–π –ì–æ—Ä–æ–¥</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=get_main_keyboard()
        )

def process_time_input(message_text, chat_id, config):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –∫–Ω–æ–ø–æ–∫"""
    time_match = re.match(r'üïê\s*(\d{1,2}):(\d{2})', message_text)
    if time_match:
        hour = int(time_match.group(1))
        minute = int(time_match.group(2))
        set_time_config(chat_id, config, hour, minute)
    else:
        send_telegram_message(chat_id, 
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú",
            reply_markup=get_time_keyboard()
        )

def process_custom_time_input(message_text, chat_id, config):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏"""
    time_match = re.match(r'(\d{1,2}):(\d{2})', message_text)
    if time_match:
        hour = int(time_match.group(1))
        minute = int(time_match.group(2))
        set_time_config(chat_id, config, hour, minute)
    else:
        send_telegram_message(chat_id, 
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>–ß–ß:–ú–ú</code>\n"
            "–ü—Ä–∏–º–µ—Ä: <code>15:30</code>",
            reply_markup=get_cancel_keyboard()
        )

def process_event_input(message_text, chat_id, current_state):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å–æ–±—ã—Ç–∏—è"""
    try:
        date_key = current_state.replace("waiting_event_text_", "")
        month = int(date_key[:2])
        day = int(date_key[2:])
        
        if message_text.strip():
            result = add_event(month, day, message_text.strip())
            user_states.pop(chat_id, None)
            send_telegram_message(chat_id, result, reply_markup=get_main_keyboard())
        else:
            send_telegram_message(chat_id, 
                "‚ùå –¢–µ–∫—Å—Ç —Å–æ–±—ã—Ç–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                reply_markup=get_cancel_keyboard()
            )
    except Exception as e:
        send_telegram_message(chat_id, 
            f"‚ùå –û—à–∏–±–∫–∞: {e}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=get_cancel_keyboard()
        )

def show_events_for_date(chat_id, month, day, action_type):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã"""
    events_db = load_events()
    date_key = f"{month:02d}{day:02d}"
    
    if date_key not in events_db or not events_db[date_key]:
        send_telegram_message(chat_id, 
            f"üì≠ –ù–∞ –¥–∞—Ç—É {day:02d}.{month:02d} –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π",
            reply_markup=get_edit_events_keyboard()
        )
        return
    
    events = events_db[date_key]
    message = f"üìÖ <b>–°–æ–±—ã—Ç–∏—è –Ω–∞ {day:02d}.{month:02d}:</b>\n\n"
    
    keyboard = []
    for i, event in enumerate(events, 1):
        message += f"{i}. {event}\n"
        if action_type == "delete":
            keyboard.append([f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ {i}"])
    
    if action_type == "edit":
        message += "\n‚ÑπÔ∏è –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        message += f"<code>/editevent {day:02d}.{month:02d} –ù–û–ú–ï–† –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç</code>"
    elif action_type == "delete":
        user_states[chat_id] = f"confirm_delete_{date_key}"
        keyboard.append(["üîô –ù–∞–∑–∞–¥ –∫ –¥–∞—Ç–∞–º"])
    
    reply_markup = {"keyboard": keyboard, "resize_keyboard": True} if keyboard else None
    send_telegram_message(chat_id, message, reply_markup=reply_markup)

def set_time_config(chat_id, config, hour, minute):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –≤ –∫–æ–Ω—Ñ–∏–≥"""
    if 0 <= hour <= 23 and 0 <= minute <= 59:
        config["SEND_HOUR"] = hour
        config["SEND_MINUTE"] = minute
        save_config(config)
        user_states.pop(chat_id, None)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
        utc_hour = (hour - 5) % 24
        
        send_telegram_message(chat_id,
            f"‚úÖ <b>–í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!</b>\n\n"
            f"üïê <b>–î—É—à–∞–Ω–±–µ:</b> {hour:02d}:{minute:02d} (UTC+5)\n"
            f"üåê <b>–°–µ—Ä–≤–µ—Ä:</b> {utc_hour:02d}:{minute:02d} (UTC)\n\n"
            f"–°–ª–µ–¥—É—é—â–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –±—É–¥–µ—Ç –≤ {hour:02d}:{minute:02d} –ø–æ –î—É—à–∞–Ω–±–µ",
            reply_markup=get_main_keyboard()
        )
    else:
        send_telegram_message(chat_id, 
            "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è!\n–ß–∞—Å—ã: 0-23, –ú–∏–Ω—É—Ç—ã: 0-59",
            reply_markup=get_time_keyboard()
        )

# ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (show_settings, send_test_message, enable_bot, disable_bot –∏ —Ç.–¥.)
# –ü—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏—Ö –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏

def check_admin_messages():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–æ–≤"""
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getUpdates"
        response = requests.get(url)
        
        if response.status_code == 200:
            data = response.json()
            if data["ok"] and data["result"]:
                for update in data["result"]:
                    if "message" in update and "text" in update["message"]:
                        message_text = update["message"]["text"]
                        chat_id = update["message"]["chat"]["id"]
                        process_admin_command(message_text, chat_id)
                
                # –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
                if data["result"]:
                    last_id = data["result"][-1]["update_id"]
                    requests.get(f"{url}?offset={last_id + 1}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        return False
