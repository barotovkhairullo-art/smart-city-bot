import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ========== –ù–ê–°–¢–†–û–ô–ö–ò ==========
# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç @BotFather
API_TOKEN = '8404371791:AAG-uiZ7Oab4udWZsb5HgijR56dPMPBH9W0'

# ID –∞–¥–º–∏–Ω–∞ (–≤–∞—à ID –≤ Telegram)
ADMIN_ID = 708267814  # –í–∞—à ID: @bkh3044

# –°–ø–∏—Å–æ–∫ ID –≥—Ä—É–ø–ø
GROUPS = [
    -1003104338746,  # –ì—Ä—É–ø–ø–∞: "–¢–µ—Å—Ç –ì—Ä—É–ø–ø–∞"
]
# ===============================

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
try:
    bot = Bot(token=API_TOKEN)
    dp = Dispatcher()
    print("‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π, –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
    exit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
async def on_startup():
    try:
        await bot.send_message(ADMIN_ID, "‚úÖ –°–µ—Ä–≤–µ—Ä –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–∞—Ö
        for group_id in GROUPS:
            try:
                chat = await bot.get_chat(group_id)
                group_name = chat.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                logger.info(f"üìã –ì—Ä—É–ø–ø–∞: {group_name} | üÜî ID: {group_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ {group_id}: {e}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
async def on_shutdown():
    try:
        await bot.send_message(ADMIN_ID, "‚ùå –°–µ—Ä–≤–µ—Ä –±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ
async def get_group_info(group_id: int) -> str:
    try:
        chat = await bot.get_chat(group_id)
        group_name = chat.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        group_type = "–ì—Ä—É–ø–ø–∞" if chat.type == "group" else "–°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞" if chat.type == "supergroup" else "–ö–∞–Ω–∞–ª"
        members_count = await bot.get_chat_members_count(group_id)
        
        return f"üìã {group_name}\nüÜî ID: {group_id}\nüë• –¢–∏–ø: {group_type}\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {members_count}"
    except Exception as e:
        return f"üÜî ID –≥—Ä—É–ø–ø—ã: {group_id}\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: {e}"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–º–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = """
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
/worktime - –£–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
/contacts - –ö–æ–Ω—Ç–∞–∫—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏
/groups - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–∞—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
"""
    await message.answer(help_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /worktime
@dp.message(Command("worktime"))
async def cmd_worktime(message: types.Message):
    await message.answer("üïê –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 8:00 - 17:00")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /contacts
@dp.message(Command("contacts"))
async def cmd_contacts(message: types.Message):
    contacts_text = """
üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:

üìç –ê–¥—Ä–µ—Å: –≥. –£–º–Ω—ã–π –ì–æ—Ä–æ–¥, —É–ª. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è, 1
üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67
üìß Email: admin@smartcity.gov
üåê –°–∞–π—Ç: www.smartcity.gov
"""
    await message.answer(contacts_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /groups (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
@dp.message(Command("groups"))
async def cmd_groups(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    groups_info = "üìä **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–∞—Ö:**\n\n"
    
    for i, group_id in enumerate(GROUPS, 1):
        group_info = await get_group_info(group_id)
        groups_info += f"{i}. {group_info}\n\n"
    
    await message.answer(groups_info, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def echo_message(message: types.Message):
    await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    await on_startup()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        # –ü—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        asyncio.run(on_shutdown())
