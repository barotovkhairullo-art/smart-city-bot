import json
import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from history_events import add_event, get_tajikistan_history, load_events
from weather_service import get_dushanbe_weather

TELEGRAM_BOT_TOKEN = "8249137825:AAHChjPuHOdL7Y5su0gYpQnwtDZ4ubfXsl0"
CHANNEL_ID = "-1003104338746"
STICKER_ID = "CAACAgIAAxkBAAEPnw5o-adhPImHgSmQpfa-yO9kVk1RxAACwwwAAsVEyEtvpOuf2LbHBDYE"

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def load_config():
    with open('config.json', 'r') as f:
        return json.load(f)

def save_config(config):
    with open('config.json', 'w') as f:
        json.dump(config, f, indent=2)

def is_admin(user_id):
    config = load_config()
    return user_id in config["ADMIN_IDS"]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    await update.message.reply_text(
        "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        "‚è∞ /time - –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "üïê /settime 10 45 - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è\n"
        "üìÖ /addevent 15.11 –°–æ–±—ã—Ç–∏–µ - –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ\n"
        "üìö /events - –°–ø–∏—Å–æ–∫ –¥–∞—Ç\n"
        "üîß /settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n"
        "üì® /test - –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞\n"
        "‚ö° /enable - –í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞\n"
        "üö´ /disable - –í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞"
    )

async def set_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    if len(context.args) != 2:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /settime –ß–ê–° –ú–ò–ù–£–¢–ê\n–ü—Ä–∏–º–µ—Ä: /settime 10 45")
        return
    
    try:
        hour = int(context.args[0])
        minute = int(context.args[1])
        
        if 0 <= hour <= 23 and 0 <= minute <= 59:
            config = load_config()
            config["SEND_HOUR"] = hour
            config["SEND_MINUTE"] = minute
            save_config(config)
            
            await update.message.reply_text(f"‚úÖ –í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {hour:02d}:{minute:02d}")
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è! –ß–∞—Å—ã: 0-23, –ú–∏–Ω—É—Ç—ã: 0-59")
    except:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞")

async def add_event_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /addevent –î–î.–ú–ú –°–æ–±—ã—Ç–∏–µ\n–ü—Ä–∏–º–µ—Ä: /addevent 15.11 1990 ‚Äì –°–æ–±—ã—Ç–∏–µ")
        return
    
    try:
        date_str = context.args[0]
        event_text = ' '.join(context.args[1:])
        day, month = map(int, date_str.split('.'))
        
        result = add_event(month, day, event_text)
        await update.message.reply_text(result)
    except:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞! –§–æ—Ä–º–∞—Ç: –î–î.–ú–ú")

async def test_send(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    await update.message.reply_text("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendSticker"
        data = {"chat_id": CHANNEL_ID, "sticker": STICKER_ID}
        requests.post(url, data=data)
    except:
        pass
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    history_text = get_tajikistan_history()
    weather_text = get_dushanbe_weather()
    
    message = "üîÑ –¢–ï–°–¢–û–í–ê–Ø –û–¢–ü–†–ê–í–ö–ê\n\n"
    message += history_text + "\n"
    message += weather_text + "\n\n"
    message += "üìñ –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–Ω–∏—Ç–∞—Ä–Ω–æ–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ ¬´–£–º–Ω—ã–π –≥–æ—Ä–æ–¥¬ª"
    
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    data = {"chat_id": CHANNEL_ID, "text": message}
    
    response = requests.post(url, data=data)
    
    if response.status_code == 200:
        await update.message.reply_text("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")

async def show_events(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    events_db = load_events()
    if not events_db:
        await update.message.reply_text("üì≠ –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –≤ –±–∞–∑–µ")
        return
    
    message = "üìö –î–∞—Ç—ã —Å —Å–æ–±—ã—Ç–∏—è–º–∏:\n\n"
    for date_key in sorted(events_db.keys()):
        month = int(date_key[:2])
        day = int(date_key[2:])
        count = len(events_db[date_key])
        message += f"üìÖ {day:02d}.{month:02d} - {count} —Å–æ–±—ã—Ç–∏–π\n"
    
    await update.message.reply_text(message)

async def show_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    config = load_config()
    status = "‚úÖ –í–ö–õ–Æ–ß–ï–ù" if config["BOT_ENABLED"] else "‚ùå –í–´–ö–õ–Æ–ß–ï–ù"
    
    await update.message.reply_text(
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:\n\n"
        f"‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {config['SEND_HOUR']:02d}:{config['SEND_MINUTE']:02d}\n"
        f"üîß –°—Ç–∞—Ç—É—Å: {status}\n"
        f"üëë –ê–¥–º–∏–Ω–æ–≤: {len(config['ADMIN_IDS'])}"
    )

async def enable_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    config = load_config()
    config["BOT_ENABLED"] = True
    save_config(config)
    await update.message.reply_text("‚úÖ –ë–æ—Ç –≤–∫–ª—é—á–µ–Ω!")

async def disable_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    config = load_config()
    config["BOT_ENABLED"] = False
    save_config(config)
    await update.message.reply_text("‚úÖ –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω!")

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("settime", set_time))
application.add_handler(CommandHandler("addevent", add_event_cmd))
application.add_handler(CommandHandler("test", test_send))
application.add_handler(CommandHandler("events", show_events))
application.add_handler(CommandHandler("settings", show_settings))
application.add_handler(CommandHandler("enable", enable_bot))
application.add_handler(CommandHandler("disable", disable_bot))